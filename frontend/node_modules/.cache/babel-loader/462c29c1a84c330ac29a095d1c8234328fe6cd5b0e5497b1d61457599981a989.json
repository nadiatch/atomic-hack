{"ast":null,"code":"export function createInterceptorResponse() {\n  return function interceptorResponse(response) {\n    if (response.status === 401 || response.status === 403) {\n      localStorage.removeItem(\"token\");\n      window.location.href = \"/\";\n    }\n    return response;\n  };\n}\nexport function createInterceptorBeforeRequest() {\n  return function interceptorBeforeRequest(request) {\n    let token = localStorage.getItem('token');\n    if (token) request.headers[\"Authorization\"] = `Bearer ${token}`;\n    return request;\n  };\n}","map":{"version":3,"names":["createInterceptorResponse","interceptorResponse","response","status","localStorage","removeItem","window","location","href","createInterceptorBeforeRequest","interceptorBeforeRequest","request","token","getItem","headers"],"sources":["/Users/n0rt0n/projects/atomicHack/atomic-hack/frontend/src/requests/_axiosInterceptors.ts"],"sourcesContent":["import {AxiosResponse} from \"axios\";\n\nexport function createInterceptorResponse() {\n    return function interceptorResponse(response: AxiosResponse) {\n        if (response.status === 401 || response.status === 403) {\n            localStorage.removeItem(\"token\");\n            window.location.href=\"/\";\n        }\n        return response;\n    };\n}\n\nexport function createInterceptorBeforeRequest() {\n    return function interceptorBeforeRequest(request: any) {\n        let token = localStorage.getItem('token');\n        if (token) request.headers[\"Authorization\"] = `Bearer ${token}`;\n        return request;\n    };\n}\n"],"mappings":"AAEA,OAAO,SAASA,yBAAyBA,CAAA,EAAG;EACxC,OAAO,SAASC,mBAAmBA,CAACC,QAAuB,EAAE;IACzD,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAID,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACpDC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;MAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,GAAG;IAC5B;IACA,OAAON,QAAQ;EACnB,CAAC;AACL;AAEA,OAAO,SAASO,8BAA8BA,CAAA,EAAG;EAC7C,OAAO,SAASC,wBAAwBA,CAACC,OAAY,EAAE;IACnD,IAAIC,KAAK,GAAGR,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC;IACzC,IAAID,KAAK,EAAED,OAAO,CAACG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUF,KAAK,EAAE;IAC/D,OAAOD,OAAO;EAClB,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}